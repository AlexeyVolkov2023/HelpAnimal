// <auto-generated />
using System;
using System.Collections.Generic;
using HelpAnimal.Infrastructura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HelpAnimal.Infrastructura.Migrations
{
    [DbContext(typeof(HelpAnimalDbContext))]
    [Migration("20241006164549_Initia1l")]
    partial class Initia1l
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Experience", "HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer.Experience#ExsperienceYears", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("ExperienceYears")
                                .HasMaxLength(60)
                                .HasColumnType("integer")
                                .HasColumnName("experience_experience_years");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("full_name_name");

                            b1.Property<string>("Patronymic")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("full_name_patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("full_name_surname");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer.Phone#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("phone_number");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("HelpAnimal.Domain.AnimalManagement.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("volunteer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("Birthday", "HelpAnimal.Domain.AnimalManagement.Entities.Animal.Birthday#AnimalsBirthday", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Birthday")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("birthday_birthday");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "HelpAnimal.Domain.AnimalManagement.Entities.Animal.Phone#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "HelpAnimal.Domain.AnimalManagement.Entities.Animal.Status#HelpStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_animals");

                    b.HasIndex("volunteer_id")
                        .HasDatabaseName("ix_animals_volunteer_id");

                    b.ToTable("animals", (string)null);
                });

            modelBuilder.Entity("HelpAnimal.Domain.SpeciesManagement.AggregateRoot.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("HelpAnimal.Domain.SpeciesManagement.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_breeds");

                    b.HasIndex("SpeciesId")
                        .HasDatabaseName("ix_breeds_species_id");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer", b =>
                {
                    b.OwnsOne("HelpAnimal.Domain.Shared.ValueObject.RequisiteDetails", "RequisiteCollection", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("requisite_collection");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("HelpAnimal.Domain.Shared.ValueObject.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("RequisiteDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("RequisiteDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("requisite_collection");

                                    b2.WithOwner()
                                        .HasForeignKey("RequisiteDetailsVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_requisite_details_volunteer_id");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.SocialDetails", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("social_networks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("HelpAnimal.Domain.AnimalManagement.ValueObjects.SocialNetwork", "Networks", b2 =>
                                {
                                    b2.Property<Guid>("SocialDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        
                                        .HasColumnType("text");

                                    b2.Property<string>("Network")
                                        
                                        .HasColumnType("text");

                                    b2.HasKey("SocialDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("social_networks");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialDetailsVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_social_details_volunteer_id");
                                });

                            b1.Navigation("Networks");
                        });

                    b.Navigation("RequisiteCollection");

                    b.Navigation("SocialNetworks")
                        .IsRequired();
                });

            modelBuilder.Entity("HelpAnimal.Domain.AnimalManagement.Entities.Animal", b =>
                {
                    b.HasOne("HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer", null)
                        .WithMany("Animals")
                        .HasForeignKey("volunteer_id")
                        .HasConstraintName("fk_animals_volunteers_volunteer_id");

                    b.OwnsOne("HelpAnimal.Domain.Shared.ValueObject.RequisiteDetails", "RequisiteCollection", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.HasKey("AnimalId")
                                .HasName("pk_animals");

                            b1.ToTable("animals");

                            b1.ToJson("requisite_collection");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_animal_id");

                            b1.OwnsMany("HelpAnimal.Domain.Shared.ValueObject.Requisite", "Requisites", b2 =>
                                {
                                    b2.Property<Guid>("RequisiteDetailsAnimalId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("RequisiteDetailsAnimalId", "Id");

                                    b2.ToTable("animals");

                                    b2.ToJson("requisite_collection");

                                    b2.WithOwner()
                                        .HasForeignKey("RequisiteDetailsAnimalId")
                                        .HasConstraintName("fk_animals_animals_requisite_details_animal_id");
                                });

                            b1.Navigation("Requisites");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.Address", "AnimalAddress", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("NumberHome")
                                .HasMaxLength(100)
                                .HasColumnType("integer");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("animal_address");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.AnimalData", "Profile", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("animal_profile");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.AnimalInformation", "Information", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("HealthInfo")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision");

                            b1.Property<bool>("IsNeutered")
                                .HasColumnType("boolean");

                            b1.Property<double>("Weight")
                                .HasColumnType("double precision");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("animal_information");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.AnimalPhotosDetails", "AnimalPhotos", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("animal_photos");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");

                            b1.OwnsMany("HelpAnimal.Domain.AnimalManagement.ValueObjects.AnimalPhoto", "Photos", b2 =>
                                {
                                    b2.Property<Guid>("AnimalPhotosDetailsAnimalId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsMain")
                                        .HasColumnType("boolean");

                                    b2.Property<string>("StoragePath")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("AnimalPhotosDetailsAnimalId", "Id");

                                    b2.ToTable("animals");

                                    b2.ToJson("animal_photos");

                                    b2.WithOwner()
                                        .HasForeignKey("AnimalPhotosDetailsAnimalId")
                                        .HasConstraintName("fk_animals_animals_animal_photos_details_animal_id");
                                });

                            b1.Navigation("Photos");
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.IdentifierAnimal", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BreedGuid")
                                .HasColumnType("uuid");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("identifier_animal");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");

                            b1.OwnsOne("HelpAnimal.Domain.SpeciesManagement.ID.SpeciesId", "SpeciesIdentifier", b2 =>
                                {
                                    b2.Property<Guid>("IdentifierAnimalAnimalId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Value")
                                        .HasColumnType("uuid");

                                    b2.HasKey("IdentifierAnimalAnimalId");

                                    b2.ToTable("animals");

                                    b2.ToJson("identifier_animal");

                                    b2.WithOwner()
                                        .HasForeignKey("IdentifierAnimalAnimalId")
                                        .HasConstraintName("fk_animals_animals_identifier_animal_animal_id");
                                });

                            b1.Navigation("SpeciesIdentifier")
                                .IsRequired();
                        });

                    b.OwnsOne("HelpAnimal.Domain.AnimalManagement.ValueObjects.VaccinationDetails", "AlreadyVaccinated", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uuid");

                            b1.HasKey("AnimalId");

                            b1.ToTable("animals");

                            b1.ToJson("already_vaccination");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId")
                                .HasConstraintName("fk_animals_animals_id");

                            b1.OwnsMany("HelpAnimal.Domain.AnimalManagement.ValueObjects.Vaccination", "Vaccinations", b2 =>
                                {
                                    b2.Property<Guid>("VaccinationDetailsAnimalId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<DateTime>("DateVaccination")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("NameVaccine")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("VaccinationDetailsAnimalId", "Id");

                                    b2.ToTable("animals");

                                    b2.ToJson("already_vaccination");

                                    b2.WithOwner()
                                        .HasForeignKey("VaccinationDetailsAnimalId")
                                        .HasConstraintName("fk_animals_animals_vaccination_details_animal_id");
                                });

                            b1.Navigation("Vaccinations");
                        });

                    b.Navigation("AlreadyVaccinated");

                    b.Navigation("AnimalAddress");

                    b.Navigation("AnimalPhotos");

                    b.Navigation("Identifier");

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("RequisiteCollection");
                });

            modelBuilder.Entity("HelpAnimal.Domain.SpeciesManagement.Entities.Breed", b =>
                {
                    b.HasOne("HelpAnimal.Domain.SpeciesManagement.AggregateRoot.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_breeds_species_species_id");
                });

            modelBuilder.Entity("HelpAnimal.Domain.AnimalManagement.AggregateRoot.Volunteer", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("HelpAnimal.Domain.SpeciesManagement.AggregateRoot.Species", b =>
                {
                    b.Navigation("Breeds");
                });
#pragma warning restore 612, 618
        }
    }
}
